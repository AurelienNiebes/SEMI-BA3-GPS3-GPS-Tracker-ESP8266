D G "__PCH__" 0 0 ""4.106""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""10-mai-12""
D G "__TIME__" 0 0 ""09:09:10"" "fat_ex_shell.c                              ////"
d G "PIN_A0" 1 28 "31744"
d G "PIN_A1" 1 29 "31745"
d G "PIN_A2" 1 30 "31746"
d G "PIN_A3" 1 31 "31747"
d G "PIN_A4" 1 32 "31748"
d G "PIN_A5" 1 33 "31749"
d G "PIN_A6" 1 34 "31750"
d G "PIN_B0" 1 36 "31752"
d G "PIN_B1" 1 37 "31753"
d G "PIN_B2" 1 38 "31754"
d G "PIN_B3" 1 39 "31755"
d G "PIN_B4" 1 40 "31756"
d G "PIN_B5" 1 41 "31757"
d G "PIN_B6" 1 42 "31758"
d G "PIN_B7" 1 43 "31759"
d G "PIN_C0" 1 45 "31760"
d G "PIN_C1" 1 46 "31761"
d G "PIN_C2" 1 47 "31762"
d G "PIN_C4" 1 48 "31764"
d G "PIN_C5" 1 49 "31765"
d G "PIN_C6" 1 50 "31766"
d G "PIN_C7" 1 51 "31767"
d G "PIN_D0" 1 53 "31768"
d G "PIN_D1" 1 54 "31769"
d G "PIN_D2" 1 55 "31770"
d G "PIN_D3" 1 56 "31771"
d G "PIN_D4" 1 57 "31772"
d G "PIN_D5" 1 58 "31773"
d G "PIN_D6" 1 59 "31774"
d G "PIN_D7" 1 60 "31775"
d G "PIN_E0" 1 62 "31776"
d G "PIN_E1" 1 63 "31777"
d G "PIN_E2" 1 64 "31778"
d G "PIN_E3" 1 65 "31779"
d G "PIN_E7" 1 66 "31783"
d G "FALSE" 1 69 "0"
d G "TRUE" 1 70 "1"
d G "BYTE" 1 72 "int8"
d G "BOOLEAN" 1 73 "int1"
d G "getc" 1 75 "getch"
d G "fgetc" 1 76 "getch"
d G "getchar" 1 77 "getch"
d G "putc" 1 78 "putchar"
d G "fputc" 1 79 "putchar"
d G "fgets" 1 80 "gets"
d G "fputs" 1 81 "puts"
d G "WDT_TIMEOUT" 1 87 "7"
d G "MCLR_FROM_SLEEP" 1 88 "11"
d G "MCLR_FROM_RUN" 1 89 "15"
d G "NORMAL_POWER_UP" 1 90 "12"
d G "BROWNOUT_RESTART" 1 91 "14"
d G "WDT_FROM_SLEEP" 1 92 "3"
d G "RESET_INSTRUCTION" 1 93 "0"
d G "REG_LOW_POWER" 1 96 "1"
d G "REG_NORMAL" 1 97 "0" "default"
d G "T0_INTERNAL" 1 105 "0"
d G "T0_EXT_L_TO_H" 1 106 "32"
d G "T0_EXT_H_TO_L" 1 107 "48"
d G "T0_DIV_1" 1 109 "8"
d G "T0_DIV_2" 1 110 "0"
d G "T0_DIV_4" 1 111 "1"
d G "T0_DIV_8" 1 112 "2"
d G "T0_DIV_16" 1 113 "3"
d G "T0_DIV_32" 1 114 "4"
d G "T0_DIV_64" 1 115 "5"
d G "T0_DIV_128" 1 116 "6"
d G "T0_DIV_256" 1 117 "7"
d G "T0_OFF" 1 119 "0x80"
d G "T0_8_BIT" 1 121 "0x40"
d G "RTCC_INTERNAL" 1 123 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 124 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 125 "48"
d G "RTCC_DIV_1" 1 126 "8"
d G "RTCC_DIV_2" 1 127 "0"
d G "RTCC_DIV_4" 1 128 "1"
d G "RTCC_DIV_8" 1 129 "2"
d G "RTCC_DIV_16" 1 130 "3"
d G "RTCC_DIV_32" 1 131 "4"
d G "RTCC_DIV_64" 1 132 "5"
d G "RTCC_DIV_128" 1 133 "6"
d G "RTCC_DIV_256" 1 134 "7"
d G "RTCC_OFF" 1 135 "0x80"
d G "RTCC_8_BIT" 1 136 "0x40"
d G "WDT_ON" 1 147 "0x100"
d G "WDT_OFF" 1 148 "0"
d G "T1_DISABLED" 1 154 "0"
d G "T1_INTERNAL" 1 155 "0x85"
d G "T1_EXTERNAL" 1 156 "0x87"
d G "T1_EXTERNAL_SYNC" 1 157 "0x83"
d G "T1_CLK_OUT" 1 159 "8"
d G "T1_DIV_BY_1" 1 161 "0"
d G "T1_DIV_BY_2" 1 162 "0x10"
d G "T1_DIV_BY_4" 1 163 "0x20"
d G "T1_DIV_BY_8" 1 164 "0x30"
d G "T2_DISABLED" 1 169 "0"
d G "T2_DIV_BY_1" 1 170 "4"
d G "T2_DIV_BY_4" 1 171 "5"
d G "T2_DIV_BY_16" 1 172 "6"
d G "T3_DISABLED" 1 178 "0"
d G "T3_INTERNAL" 1 179 "0x85"
d G "T3_EXTERNAL" 1 180 "0x87"
d G "T3_EXTERNAL_SYNC" 1 181 "0x83"
d G "T3_DIV_BY_1" 1 183 "0"
d G "T3_DIV_BY_2" 1 184 "0x10"
d G "T3_DIV_BY_4" 1 185 "0x20"
d G "T3_DIV_BY_8" 1 186 "0x30"
d G "T3_CCP1_TO_2" 1 189 "0x48"
d G "T3_CCP2" 1 190 "0x8"
d G "CCP_OFF" 1 196 "0"
d G "CCP_CAPTURE_FE" 1 197 "4"
d G "CCP_CAPTURE_RE" 1 198 "5"
d G "CCP_CAPTURE_DIV_4" 1 199 "6"
d G "CCP_CAPTURE_DIV_16" 1 200 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 201 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 202 "9"
d G "CCP_COMPARE_INT" 1 203 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 204 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 205 "0xB"
d G "CCP_PWM" 1 206 "0xC"
d G "CCP_PWM_PLUS_1" 1 207 "0x1c"
d G "CCP_PWM_PLUS_2" 1 208 "0x2c"
d G "CCP_PWM_PLUS_3" 1 209 "0x3c"
d G "CCP_PWM_H_H" 1 215 "0x0c"
d G "CCP_PWM_H_L" 1 216 "0x0d"
d G "CCP_PWM_L_H" 1 217 "0x0e"
d G "CCP_PWM_L_L" 1 218 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 220 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 221 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 222 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 224 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 225 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 226 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 227 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 228 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 229 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 230 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 232 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 233 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 234 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 236 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 237 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 238 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 240 "0x80000000"
d G "PSP_ENABLED" 1 250 "0x10"
d G "PSP_DISABLED" 1 251 "0"
d G "SPI_MASTER" 1 258 "0x20"
d G "SPI_SLAVE" 1 259 "0x24"
d G "SPI_L_TO_H" 1 260 "0"
d G "SPI_H_TO_L" 1 261 "0x10"
d G "SPI_CLK_DIV_4" 1 262 "0"
d G "SPI_CLK_DIV_16" 1 263 "1"
d G "SPI_CLK_DIV_64" 1 264 "2"
d G "SPI_CLK_T2" 1 265 "3"
d G "SPI_SS_DISABLED" 1 266 "1"
d G "SPI_SAMPLE_AT_END" 1 268 "0x8000"
d G "SPI_XMIT_L_TO_H" 1 269 "0x4000"
d G "UART_ADDRESS" 1 275 "2"
d G "UART_DATA" 1 276 "4"
d G "UART_AUTODETECT" 1 277 "8"
d G "UART_AUTODETECT_NOWAIT" 1 278 "9"
d G "UART_WAKEUP_ON_RDA" 1 279 "10"
d G "UART_SEND_BREAK" 1 280 "13"
d G "A0_A3_A1_A3" 1 284 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 285 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 286 "0xbcf05"
d G "NC_NC_NC_NC" 1 287 "0x0ff07"
d G "A0_A3_A1_A2" 1 288 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 289 "0x9ef01"
d G "A0_VR_A1_VR" 1 290 "0x3ff06"
d G "A3_VR_A2_VR" 1 291 "0xcff0e"
d G "CP1_INVERT" 1 292 "0x0000010"
d G "CP2_INVERT" 1 293 "0x0000020"
d G "VREF_LOW" 1 301 "0xa0"
d G "VREF_HIGH" 1 302 "0x80"
d G "VREF_F5" 1 304 "0x40"
d G "VREF_COMP" 1 305 "0x10"
d G "LVD_LVDIN" 1 310 "0x1F"
d G "LVD_45" 1 311 "0x1E"
d G "LVD_42" 1 312 "0x1D"
d G "LVD_40" 1 313 "0x1C"
d G "LVD_38" 1 314 "0x1B"
d G "LVD_36" 1 315 "0x1A"
d G "LVD_35" 1 316 "0x19"
d G "LVD_33" 1 317 "0x18"
d G "LVD_30" 1 318 "0x17"
d G "LVD_28" 1 319 "0x16"
d G "LVD_27" 1 320 "0x15"
d G "LVD_25" 1 321 "0x14"
d G "LVD_24" 1 322 "0x13"
d G "LVD_23" 1 323 "0x12"
d G "LVD_22" 1 324 "0x11"
d G "LVD_21" 1 325 "0x10"
d G "LVD_TRIGGER_BELOW" 1 327 "0"
d G "LVD_TRIGGER_ABOVE" 1 328 "0x80"
d G "OSC_31KHZ" 1 334 "0"
d G "OSC_125KHZ" 1 335 "0x10"
d G "OSC_250KHZ" 1 336 "0x20"
d G "OSC_500KHZ" 1 337 "0x30"
d G "OSC_1MHZ" 1 338 "0x40"
d G "OSC_2MHZ" 1 339 "0x50"
d G "OSC_4MHZ" 1 340 "0x60"
d G "OSC_8MHZ" 1 341 "0x70"
d G "OSC_16MHZ" 1 342 "0x4060"
d G "OSC_32MHZ" 1 343 "0x4070"
d G "OSC_TIMER1" 1 345 "1"
d G "OSC_INTRC" 1 346 "2"
d G "OSC_NORMAL" 1 347 "0"
d G "OSC_IDLE_MODE" 1 349 "0x80"
d G "OSC_31250" 1 350 "0x8000"
d G "OSC_PLL_ON" 1 351 "0x4000"
d G "OSC_PLL_OFF" 1 352 "0"
d G "OSC_STATE_STABLE" 1 356 "4"
d G "OSC_STATE_EXT_RUNNING" 1 357 "8"
d G "ADC_OFF" 1 364 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 365 "0x100"
d G "ADC_CLOCK_DIV_4" 1 366 "0x04"
d G "ADC_CLOCK_DIV_8" 1 367 "0x01"
d G "ADC_CLOCK_DIV_16" 1 368 "0x05"
d G "ADC_CLOCK_DIV_32" 1 369 "0x02"
d G "ADC_CLOCK_DIV_64" 1 370 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 371 "0x07" "Internal 2-6us"
d G "NO_ANALOGS" 1 374 "0x0F" "None"
d G "ALL_ANALOG" 1 375 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 376 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 377 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 378 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 379 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 380 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 381 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 382 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 383 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 384 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 385 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 386 "0x0D" "A0 A1"
d G "AN0" 1 387 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 388 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 389 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 390 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 391 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 392 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 393 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 394 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 395 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 396 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 397 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 398 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 399 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 402 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 403 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 404 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 405 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 409 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 410 "1"
d G "ADC_READ_ONLY" 1 411 "6"
d G "L_TO_H" 1 423 "0x40"
d G "H_TO_L" 1 424 "0"
d G "GLOBAL" 1 426 "0xF2C0"
d G "INT_RTCC" 1 427 "0x00F220"
d G "INT_TIMER0" 1 428 "0x00F220"
d G "INT_TIMER1" 1 429 "0x009D01"
d G "INT_TIMER2" 1 430 "0x009D02"
d G "INT_TIMER3" 1 431 "0x00A002"
d G "INT_EXT_L2H" 1 432 "0x5000F210"
d G "INT_EXT_H2L" 1 433 "0x6000F210"
d G "INT_EXT" 1 434 "0x00F210"
d G "INT_EXT1_L2H" 1 435 "0x5001F008"
d G "INT_EXT1_H2L" 1 436 "0x6001F008"
d G "INT_EXT1" 1 437 "0x00F008"
d G "INT_EXT2_L2H" 1 438 "0x5002F010"
d G "INT_EXT2_H2L" 1 439 "0x6002F010"
d G "INT_EXT2" 1 440 "0x00F010"
d G "INT_RB" 1 441 "0x00FFF208"
d G "INT_AD" 1 442 "0x009D40"
d G "INT_RDA" 1 443 "0x009D20"
d G "INT_TBE" 1 444 "0x009D10"
d G "INT_SSP" 1 445 "0x009D08"
d G "INT_CCP1" 1 446 "0x009D04"
d G "INT_CCP2" 1 447 "0x00A001"
d G "INT_BUSCOL" 1 448 "0x00A008"
d G "INT_LOWVOLT" 1 449 "0x00A004"
d G "INT_COMP" 1 450 "0x00A040"
d G "INT_EEPROM" 1 451 "0x00A010"
d G "INT_OSCF" 1 452 "0x00A080"
d G "INT_SPP" 1 453 "0x009D80"
d G "INT_USB" 1 454 "0x00A020"
D G "_STDLIB" 2 12 ""
D G "RAND_MAX" 2 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 25 "1"
T G "div_t" 2 33 "{sint8 quot,sint8 rem}"
T G "ldiv_t" 2 38 "{sint16 quot,sint16 rem}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 21 "unsigned int8"
D G "wchar_t" 3 22 "char"
D G "NULL" 3 23 "0"
D G "offsetof" 3 25 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 2 43 2 "FUNCTION"
C L "atoi" 2 46 1 "*"
C L "atoi" 2 46 1 "*"
F G "atoi" 2 50 "sint8()"
V L "s" 2 50 "*int8" "Syntax: signed int32  atoi32(char * s)"
F G "atoi32" 2 58 "sint32()"
V L "s" 2 58 "*int8"
C L "atoi32" 2 46 3 "FUNCTION"
F G "itoa" 2 79 "*int8()"
V L "num" 2 79 "sint32"
V L "base" 2 79 "int8"
V L "s" 2 79 "*int8" "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 81 1 "*"
C L "itoa" 2 81 1 "*"
F G "atol" 2 85 "sint16()"
V L "s" 2 85 "*int8" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
F G "strtol" 2 93 "sint16()"
V L "s" 2 93 "*int8"
V L "endptr" 2 93 "*int8"
V L "base" 2 93 "sint8" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
F G "strtoul" 2 101 "int16()"
V L "s" 2 101 "*int8"
V L "endptr" 2 101 "*int8"
V L "base" 2 101 "sint8" "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 95 2 "FUNCTION"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
F G "strtof" 2 110 "float()"
V L "s" 2 110 "*int8"
V L "endptr" 2 110 "*int8"
D G "strtof48" 2 116 "(s, e) strtof(s, e)"
D G "strtod" 2 117 "(s, e) strtof(s, e)"
C L "strtof" 2 103 1 "FUNCTION"
C L "strtof" 2 120 1 "*"
D G "atof" 2 124 "(s)   strtof(s, 0)"
C L "strtof" 2 120 1 "FUNCTION"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
F G "atoe" 2 149 "float()"
V L "s" 2 149 "*int8"
C L "atoe" 2 143 2 "FUNCTION"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
F G "rand" 2 169 "int16()"
C L "rand" 2 160 1 "FUNCTION"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
F G "srand" 2 191 "void()"
V L "seed" 2 191 "int32" "Memory management functions"
C L "srand" 2 171 3 "FUNCTION"
F G "system" 2 205 "sint8()"
V L "string" 2 205 "*int8" "Searching and sorting utilities"
C L "system" 2 171 1 "FUNCTION"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 4 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
D G "labs" 2 249 "abs"
F G "div" 2 251 "div_t()"
V L "numer" 2 251 "sint8"
V L "denom" 2 251 "sint8"
F G "ldiv" 2 252 "ldiv_t()"
V L "numer" 2 252 "sint16"
V L "denom" 2 252 "sint16" "Multibyte character functions"
C L "ldiv" 2 229 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F G "memmove" 4 34 "*int8()"
V L "s1" 4 34 "*int8"
V L "s2" 4 34 "*int8"
V L "n" 4 34 "int8"
V L "sc1" 4 36 "*int8"
V L "sc2" 4 37 "*int8"
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
F G "strncpy" 4 61 "*int8()"
V L "s1" 4 61 "*int8"
V L "s2" 4 61 "*int8"
V L "n" 4 61 "int8"
V L "s" 4 63 "*int8"
C L "strcat" 4 19 3 "FUNCTION"
F G "strcat" 4 78 "*int8()"
V L "s1" 4 78 "*int8"
V L "s2" 4 78 "*int8"
V L "s" 4 80 "*int8"
C L "strncat" 4 19 2 "FUNCTION"
F G "strncat" 4 96 "*int8()"
V L "s1" 4 96 "*int8"
V L "s2" 4 96 "*int8"
V L "n" 4 96 "int8"
V L "s" 4 98 "*int8"
C L "memcmp" 4 19 3 "FUNCTION"
F G "memcmp" 4 120 "sint8()"
V L "s1" 4 120 "*int8"
V L "s2" 4 120 "*int8"
V L "n" 4 120 "int8"
V L "su1" 4 122 "*int8"
V L "su2" 4 122 "*int8"
C L "strcmp" 4 19 2 "FUNCTION"
F G "strcmp" 4 134 "sint8()"
V L "s1" 4 134 "*int8"
V L "s2" 4 134 "*int8"
C L "strcoll" 4 19 2 "FUNCTION"
F G "strcoll" 4 144 "sint8()"
V L "s1" 4 144 "*int8"
V L "s2" 4 144 "*int8"
C L "strncmp" 4 19 4 "FUNCTION"
F G "strncmp" 4 157 "sint8()"
V L "s1" 4 157 "*int8"
V L "s2" 4 157 "*int8"
V L "n" 4 157 "int8"
C L "strxfrm" 4 19 3 "FUNCTION"
F G "strxfrm" 4 169 "int8()"
V L "s1" 4 169 "*int8"
V L "s2" 4 169 "*int8"
V L "n" 4 169 "int8"
V L "s" 4 171 "*int8"
V L "n1" 4 172 "int8"
C L "memchr" 4 19 3 "FUNCTION"
F G "memchr" 4 191 "*int8()"
V L "s" 4 191 "*int8"
V L "c" 4 191 "int8"
V L "n" 4 191 "int8"
V L "uc" 4 193 "int8"
V L "su" 4 194 "*int8"
C L "strchr" 4 19 2 "FUNCTION"
F G "strchr" 4 205 "*int8()"
V L "s" 4 205 "*int8"
V L "c" 4 205 "int8"
C L "strcspn" 4 19 4 "FUNCTION"
F G "strcspn" 4 217 "int8()"
V L "s1" 4 217 "*int8"
V L "s2" 4 217 "*int8"
V L "sc1" 4 219 "*int8"
V L "sc2" 4 219 "*int8"
C L "strpbrk" 4 19 4 "FUNCTION"
F G "strpbrk" 4 232 "*int8()"
V L "s1" 4 232 "*int8"
V L "s2" 4 232 "*int8"
V L "sc1" 4 234 "*int8"
V L "sc2" 4 234 "*int8"
C L "strrchr" 4 19 2 "FUNCTION"
F G "strrchr" 4 247 "*int8()"
V L "s" 4 247 "*int8"
V L "c" 4 247 "int8"
V L "p" 4 249 "*int8"
C L "strspn" 4 19 2 "FUNCTION"
F G "strspn" 4 262 "int8()"
V L "s1" 4 262 "*int8"
V L "s2" 4 262 "*int8"
V L "sc1" 4 264 "*int8"
V L "sc2" 4 264 "*int8"
C L "strstr" 4 19 6 "FUNCTION"
F G "strstr" 4 281 "*int8()"
V L "s1" 4 281 "*int8"
V L "s2" 4 281 "*int8"
V L "s" 4 283 "*int8"
V L "t" 4 283 "*int8"
C L "strtok" 4 19 13 "FUNCTION"
F G "strtok" 4 320 "*int8()"
V L "s1" 4 320 "*int8"
V L "s2" 4 320 "*int8"
V L "beg" 4 322 "*int8"
V L "end" 4 322 "*int8"
V L "save" 4 323 "*int8"
C L "strlen" 4 19 6 "FUNCTION"
F G "strlen" 4 369 "int8()"
V L "s" 4 369 "*int8"
V L "sc" 4 371 "*int8"
C L "stricmp" 4 19 2 "FUNCTION"
F G "stricmp" 4 380 "sint8()"
V L "s1" 4 380 "*int8"
V L "s2" 4 380 "*int8"
C L "strlwr" 4 19 3 "FUNCTION"
F G "strlwr" 4 394 "*int8()"
V L "s" 4 394 "*int8"
V L "p" 4 396 "*int8"
F G "div" 2 274 "div_t()"
V L "numer" 2 274 "sint8"
V L "denom" 2 274 "sint8"
V L "val" 2 276 "div_t"
F G "ldiv" 2 282 "ldiv_t()"
V L "numer" 2 282 "sint16"
V L "denom" 2 282 "sint16"
V L "val" 2 284 "ldiv_t"
F G "atoe" 2 361 "float()"
V L "s" 2 361 "*int8"
V L "pow10" 2 363 "float"
V L "result" 2 364 "float"
V L "sign" 2 365 "int8"
V L "expsign" 2 366 "int8"
V L "c" 2 367 "int8"
V L "ptr" 2 368 "int8"
V L "i" 2 369 "int8"
V L "exp" 2 370 "float"
V L "expcnt" 2 371 "int8"
C L "atoe" 2 397 1 "FUNCTION"
F G "atoi" 2 429 "sint8()"
V L "s" 2 429 "*int8"
V L "result" 2 431 "sint8"
V L "sign" 2 432 "int8"
V L "base" 2 432 "int8"
V L "index" 2 432 "int8"
V L "c" 2 433 "int8"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
F G "atol" 2 498 "sint16()"
V L "s" 2 498 "*int8"
V L "result" 2 500 "sint16"
V L "sign" 2 501 "int8"
V L "base" 2 501 "int8"
V L "index" 2 501 "int8"
V L "c" 2 502 "int8"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "mult_with10" 2 397 1 "FUNCTION"
F G "mult_with10" 2 565 "sint32()"
V L "num" 2 565 "int32"
F G "atoi32" 2 571 "sint32()"
V L "s" 2 571 "*int8"
V L "result" 2 573 "sint32"
V L "sign" 2 574 "int8"
V L "base" 2 574 "int8"
V L "index" 2 574 "int8"
V L "c" 2 575 "int8"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
F G "itoa" 2 770 "*int8()"
V L "num" 2 770 "sint32"
V L "base" 2 770 "int8"
V L "s" 2 770 "*int8"
V L "temp" 2 772 "int32"
V L "i" 2 773 "int8"
V L "sign" 2 773 "int8"
V L "cnt" 2 773 "int8"
V L "c" 2 774 "int8"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
F G "strtof" 2 807 "float()"
V L "s" 2 807 "*int8"
V L "endptr" 2 807 "*int8"
V L "pow10" 2 809 "float"
V L "result" 2 810 "float"
V L "skip" 2 811 "int1"
V L "sign" 2 811 "int1"
V L "point" 2 811 "int1"
V L "c" 2 812 "int8"
V L "ptr" 2 813 "int8"
F G "strtoul" 2 1025 "int16()"
V L "s" 2 1025 "*int8"
V L "endptr" 2 1025 "*int8"
V L "base" 2 1025 "sint8"
V L "sc" 2 1027 "*int8"
V L "s1" 2 1027 "*int8"
V L "sd" 2 1027 "*int8"
V L "x" 2 1028 "int16"
V L "sign" 2 1029 "int8"
V L "digits" 2 1030 "int8[1]"
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
F G "strtol" 2 1087 "sint16()"
V L "s" 2 1087 "*int8"
V L "endptr" 2 1087 "*int8"
V L "base" 2 1087 "sint8"
V L "sc" 2 1089 "*int8"
V L "s1" 2 1089 "*int8"
V L "sd" 2 1089 "*int8"
V L "x" 2 1090 "sint16"
V L "sign" 2 1091 "int8"
V L "digits" 2 1092 "int8[1]"
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
F G "system" 2 1150 "sint8()"
V L "string" 2 1150 "*int8"
F G "mblen" 2 1155 "int8(*int8 string)"
V L "s" 2 1155 "*int8"
V L "n" 2 1155 "int8"
F G "mbtowc" 2 1160 "int8()"
V L "pwc" 2 1160 "*int8"
V L "s" 2 1160 "*int8"
V L "n" 2 1160 "int8"
F G "wctomb" 2 1166 "int8()"
V L "s" 2 1166 "*int8"
V L "wchar" 2 1166 "int8"
F G "mbstowcs" 2 1172 "int8()"
V L "pwcs" 2 1172 "*int8"
V L "s" 2 1172 "*int8"
V L "n" 2 1172 "int8"
F G "wcstombs" 2 1178 "int8()"
V L "s" 2 1178 "*int8"
V L "pwcs" 2 1178 "*int8"
V L "n" 2 1178 "int8"
V G "_Randseed" 2 1188 "int32"
F G "rand" 2 1190 "int16()"
F G "srand" 2 1196 "void()"
V L "seed" 2 1196 "int32"
T G "*_Cmpfun" 2 1206 "sint8(int32 seed)"
V L "p1" 2 1206 "*int8"
V L "p2" 2 1206 "*int8"
F G "qsort" 2 1213 "void()"
V L "qdata" 2 1213 "*int8"
V L "qitems" 2 1213 "int8"
V L "qsize" 2 1213 "int8"
V L "cmp" 2 1213 "_Cmpfun"
V L "m" 2 1214 "int8"
V L "j" 2 1214 "int8"
V L "i" 2 1214 "int8"
V L "l" 2 1214 "int8"
V L "done" 2 1215 "int1"
V L "t" 2 1216 "int8[16]"
F G "bsearch" 2 1241 "*int8()"
V L "key" 2 1241 "*int8"
V L "base" 2 1241 "*int8"
V L "num" 2 1241 "int8"
V L "width" 2 1241 "int8"
V L "cmp" 2 1241 "_Cmpfun"
V L "p" 2 1243 "*int8"
V L "q" 2 1243 "*int8"
V L "n" 2 1244 "int8"
V L "pivot" 2 1245 "int8"
V L "val" 2 1246 "sint8"
C L "bsearch" 2 397 1 "FUNCTION"
D G "MMCSD_PIN_SCL" 0 32 "PIN_D0" "o"
D G "MMCSD_PIN_SDI" 0 33 "PIN_D2" "i"
D G "MMCSD_PIN_SDO" 0 34 "PIN_D1" "o"
D G "MMCSD_PIN_SELECT" 0 35 "PIN_D3" "o"
D G "MMCSD_C" 6 111 ""
D G "_STDINT" 7 19 ""
T G "int8_t" 7 23 "sint8"
T G "uint8_t" 7 24 "int8"
T G "int16_t" 7 25 "sint16"
T G "uint16_t" 7 26 "int16"
T G "int32_t" 7 27 "sint32"
T G "uint32_t" 7 28 "int32"
D G "INT8_MAX" 7 37 " (128)"
D G "INT8_MIN" 7 38 " (-127)"
D G "UINT8_MAX" 7 39 " (255)"
D G "INT16_MAX" 7 41 " (32767)"
D G "INT16_MIN" 7 42 " (-32768)"
D G "UINT16_MAX" 7 43 " (65535)"
D G "INT32_MAX" 7 45 " (2147483647)"
D G "INT32_MIN" 7 46 " (-2147483648)"
D G "UINT32_MAX" 7 47 " (4294967295)"
T G "int_least8_t" 7 61 "sint8"
T G "uint_least8_t" 7 62 "int8"
T G "int_least16_t" 7 63 "sint16"
T G "uint_least16_t" 7 64 "int16"
T G "int_least32_t" 7 65 "sint32"
T G "uint_least32_t" 7 66 "int32"
D G "INT_LEAST8_MAX" 7 75 " (128)"
D G "INT_LEAST8_MIN" 7 76 " (-127)"
D G "UINT_LEAST8_MAX" 7 77 " (255)"
D G "INT_LEAST16_MAX" 7 79 " (32767)"
D G "INT_LEAST16_MIN" 7 80 " (-32768)"
D G "UINT_LEAST16_MAX" 7 81 " (65535)"
D G "INT_LEAST32_MAX" 7 83 " (2147483647)"
D G "INT_LEAST32_MIN" 7 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 7 85 " (4294967295)"
T G "int_fast8_t" 7 112 "sint8"
T G "uint_fast8_t" 7 113 "int8"
D G "INT_FAST8_MAX" 7 114 " (128)"
D G "INT_FAST8_MIN" 7 115 " (-127)"
D G "UINT_FAST8_MAX" 7 116 " (255)"
T G "int_fast16_t" 7 117 "sint16"
T G "uint_fast16_t" 7 118 "int16"
T G "int_fast32_t" 7 121 "sint32"
T G "uint_fast32_t" 7 122 "int32"
D G "INT_FAST16_MAX" 7 124 " (32767)"
D G "INT_FAST16_MIN" 7 125 " (-32768)"
D G "UINT_FAST16_MAX" 7 126 " (65535)"
D G "INT_FAST32_MAX" 7 128 " (2147483647)"
D G "INT_FAST32_MIN" 7 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 7 130 " (4294967295)"
E G "MMCSD_GOODEC" 6 138 "0"
E G "MMCSD_IDLE" 6 139 "1"
E G "MMCSD_ERASE_RESET" 6 140 "2"
E G "MMCSD_ILLEGAL_CMD" 6 141 "4"
E G "MMCSD_CRC_ERR" 6 142 "8"
E G "MMCSD_ERASE_SEQ_ERR" 6 143 "16"
E G "MMCSD_ADDR_ERR" 6 144 "32"
E G "MMCSD_PARAM_ERR" 6 145 "64"
E G "RESP_TIMEOUT" 6 145 "128"
D G "GO_IDLE_STATE" 6 147 "0"
D G "SEND_OP_COND" 6 148 "1"
D G "SEND_IF_COND" 6 149 "8"
D G "SEND_CSD" 6 150 "9"
D G "SEND_CID" 6 151 "10"
D G "SD_STATUS" 6 152 "13"
D G "SEND_STATUS" 6 153 "13"
D G "SET_BLOCKLEN" 6 154 "16"
D G "READ_SINGLE_BLOCK" 6 155 "17"
D G "WRITE_BLOCK" 6 156 "24"
D G "SD_SEND_OP_COND" 6 157 "41"
D G "APP_CMD" 6 158 "55"
D G "READ_OCR" 6 159 "58"
D G "CRC_ON_OFF" 6 160 "59"
D G "IDLE_TOKEN" 6 162 "0x01"
D G "DATA_START_TOKEN" 6 163 "0xFE"
D G "MMCSD_MAX_BLOCK_SIZE" 6 165 "512"
V G "g_mmcsd_buffer" 6 173 "uint8_t[512]"
V G "g_CRC_enabled" 6 175 "int1"
V G "g_MMCSDBufferChanged" 6 176 "int1"
V G "g_mmcsdBufferAddress" 6 178 "uint32_t"
V G "g_mmcsdPartitionOffset" 6 179 "uint32_t"
E G "sd" 6 181 "0"
E G "MMC" 6 181 "1"
V G "g_card_type" 6 181 "_card_type" "////"
C L "mmcsd_init" 6 131 2 "FUNCTION"
F G "mmcsd_init" 6 189 "MMCSD_err()"
F G "mmcsd_read_data" 6 190 "MMCSD_err()"
V L "address" 6 190 "uint32_t"
V L "size" 6 190 "uint16_t"
V L "ptr" 6 190 "*uint8_t"
F G "mmcsd_read_block" 6 191 "MMCSD_err()"
V L "address" 6 191 "uint32_t"
V L "size" 6 191 "uint16_t"
V L "ptr" 6 191 "*uint8_t"
F G "mmcsd_write_data" 6 192 "MMCSD_err()"
V L "address" 6 192 "uint32_t"
V L "size" 6 192 "uint16_t"
V L "ptr" 6 192 "*uint8_t"
F G "mmcsd_write_block" 6 193 "MMCSD_err()"
V L "address" 6 193 "uint32_t"
V L "size" 6 193 "uint16_t"
V L "ptr" 6 193 "*uint8_t"
F G "mmcsd_go_idle_state" 6 194 "MMCSD_err()"
F G "mmcsd_send_op_cond" 6 195 "MMCSD_err()"
F G "mmcsd_send_if_cond" 6 196 "MMCSD_err()"
V L "r7" 6 196 "uint8_t[1]"
F G "mmcsd_print_csd" 6 197 "MMCSD_err()"
F G "mmcsd_print_cid" 6 198 "MMCSD_err()"
F G "mmcsd_sd_status" 6 199 "MMCSD_err()"
V L "r2" 6 199 "uint8_t[1]"
F G "mmcsd_send_status" 6 200 "MMCSD_err()"
V L "r2" 6 200 "uint8_t[1]"
F G "mmcsd_set_blocklen" 6 201 "MMCSD_err()"
V L "blocklen" 6 201 "uint32_t"
F G "mmcsd_read_single_block" 6 202 "MMCSD_err()"
V L "address" 6 202 "uint32_t"
F G "mmcsd_write_single_block" 6 203 "MMCSD_err()"
V L "address" 6 203 "uint32_t"
F G "mmcsd_sd_send_op_cond" 6 204 "MMCSD_err()"
F G "mmcsd_app_cmd" 6 205 "MMCSD_err()"
F G "mmcsd_read_ocr" 6 206 "MMCSD_err()"
V L "r1" 6 206 "*uint8_t"
F G "mmcsd_crc_on_off" 6 207 "MMCSD_err()"
V L "crc_enabled" 6 207 "int8"
F G "mmcsd_send_cmd" 6 208 "MMCSD_err()"
V L "cmd" 6 208 "uint8_t"
V L "arg" 6 208 "uint32_t"
F G "mmcsd_get_r1" 6 209 "MMCSD_err()"
F G "mmcsd_get_r2" 6 210 "MMCSD_err()"
V L "r2" 6 210 "uint8_t[1]"
F G "mmcsd_get_r3" 6 211 "MMCSD_err()"
V L "r3" 6 211 "uint8_t[1]"
F G "mmcsd_get_r7" 6 212 "MMCSD_err()"
V L "r7" 6 212 "uint8_t[1]"
F G "mmcsd_wait_for_token" 6 213 "MMCSD_err()"
V L "token" 6 213 "uint8_t"
F G "mmcsd_crc7" 6 214 "uint8_t()"
V L "data" 6 214 "*int8"
V L "length" 6 214 "uint8_t"
F G "mmcsd_crc16" 6 215 "uint16_t()"
V L "data" 6 215 "*int8"
V L "length" 6 215 "uint8_t"
F G "mmcsd_select" 6 216 "void()"
F G "mmcsd_deselect" 6 217 "void()" "/ Fast Functions ! ///"
F G "mmcsd_load_buffer" 6 221 "MMCSD_err()"
F G "mmcsd_flush_buffer" 6 222 "MMCSD_err()"
F G "mmcsd_move_buffer" 6 223 "MMCSD_err()"
V L "new_addr" 6 223 "uint32_t"
F G "mmcsd_read_byte" 6 224 "MMCSD_err()"
V L "addr" 6 224 "uint32_t"
V L "data" 6 224 "*int8"
F G "mmcsd_write_byte" 6 225 "MMCSD_err()"
V L "addr" 6 225 "uint32_t"
V L "data" 6 225 "int8" "////"
C L "mmcsd_write_byte" 6 131 2 "FUNCTION"
F G "mmcsd_check_part" 6 233 "void()"
V L "off" 6 233 "uint16_t"
C L "mmcsd_check_part" 6 131 1 "FUNCTION"
V L "t" 6 238 "uint8_t"
C L "mmcsd_check_part" 6 131 1 "FUNCTION"
F G "mmcsd_init" 6 250 "MMCSD_err()"
V L "i" 6 253 "uint8_t"
V L "r1" 6 254 "uint8_t"
C L "mmcsd_init" 6 131 1 "FUNCTION"
C L "mmcsd_init" 6 131 1 "FUNCTION"
C L "mmcsd_init" 6 131 1 "FUNCTION"
C L "mmcsd_init" 6 131 1 "FUNCTION"
C L "mmcsd_init" 6 131 1 "FUNCTION"
F G "mmcsd_read_data" 6 340 "MMCSD_err()"
V L "address" 6 340 "uint32_t"
V L "size" 6 340 "uint16_t"
V L "ptr" 6 340 "*uint8_t"
V L "r1" 6 342 "MMCSD_err"
V L "i" 6 343 "uint16_t" "counter for loops"
F G "mmcsd_read_block" 6 355 "MMCSD_err(*uint8_t ptr)"
V L "address" 6 355 "uint32_t"
V L "size" 6 355 "uint16_t"
V L "ptr" 6 355 "*uint8_t"
V L "ec" 6 357 "MMCSD_err"
V L "i" 6 358 "uint16_t" "counter for loops"
C L "mmcsd_read_block" 6 131 1 "FUNCTION"
C L "mmcsd_read_block" 6 131 1 "FUNCTION"
C L "mmcsd_read_block" 6 131 1 "FUNCTION"
C L "mmcsd_read_block" 6 131 1 "FUNCTION"
C L "mmcsd_read_block" 6 131 1 "FUNCTION"
F G "mmcsd_write_data" 6 401 "MMCSD_err(*uint8_t ptr)"
V L "address" 6 401 "uint32_t"
V L "size" 6 401 "uint16_t"
V L "ptr" 6 401 "*uint8_t"
V L "ec" 6 403 "MMCSD_err"
V L "i" 6 404 "uint16_t" "counter for loops"
F G "mmcsd_write_block" 6 416 "MMCSD_err(*uint8_t ptr)"
V L "address" 6 416 "uint32_t"
V L "size" 6 416 "uint16_t"
V L "ptr" 6 416 "*uint8_t"
V L "ec" 6 418 "MMCSD_err"
V L "i" 6 419 "uint16_t" "send command"
C L "mmcsd_write_block" 6 131 1 "FUNCTION"
C L "mmcsd_write_block" 6 131 1 "FUNCTION"
C L "mmcsd_write_block" 6 131 1 "FUNCTION"
C L "mmcsd_write_block" 6 131 1 "FUNCTION"
C L "mmcsd_write_block" 6 131 1 "FUNCTION"
F G "mmcsd_go_idle_state" 6 461 "MMCSD_err(*uint8_t ptr)"
F G "mmcsd_send_op_cond" 6 468 "MMCSD_err(*uint8_t ptr)"
F G "mmcsd_send_if_cond" 6 475 "MMCSD_err(*uint8_t ptr)"
V L "r7" 6 475 "uint8_t[1]"
F G "mmcsd_print_csd" 6 482 "MMCSD_err(*uint8_t r7)"
V L "buf" 6 485 "uint8_t[16]"
V L "i" 6 486 "uint8_t"
V L "r1" 6 487 "uint8_t" "MMCs don't support this command"
C L "mmcsd_print_csd" 6 131 29 "FUNCTION"
F G "mmcsd_print_cid" 6 546 "MMCSD_err()"
V L "buf" 6 549 "uint8_t[16]"
V L "i" 6 550 "uint8_t"
V L "r1" 6 551 "uint8_t" "MMCs don't support this command"
C L "mmcsd_print_cid" 6 131 7 "FUNCTION"
F G "mmcsd_sd_status" 6 587 "MMCSD_err()"
V L "r2" 6 587 "uint8_t[1]"
V L "i" 6 589 "uint8_t"
F G "mmcsd_send_status" 6 607 "MMCSD_err()"
V L "r2" 6 607 "uint8_t[1]"
F G "mmcsd_set_blocklen" 6 614 "MMCSD_err(*uint8_t r2)"
V L "blocklen" 6 614 "uint32_t"
F G "mmcsd_read_single_block" 6 621 "MMCSD_err(uint32_t blocklen)"
V L "address" 6 621 "uint32_t"
F G "mmcsd_write_single_block" 6 628 "MMCSD_err(uint32_t address)"
V L "address" 6 628 "uint32_t"
F G "mmcsd_sd_send_op_cond" 6 635 "MMCSD_err(uint32_t address)"
F G "mmcsd_app_cmd" 6 642 "MMCSD_err(uint32_t address)"
F G "mmcsd_read_ocr" 6 649 "MMCSD_err(uint32_t address)"
V L "r3" 6 649 "int8[1]"
F G "mmcsd_crc_on_off" 6 656 "MMCSD_err(*int8 r3)"
V L "crc_enabled" 6 656 "int8"
F G "mmcsd_send_cmd" 6 665 "MMCSD_err(int8 crc_enabled)"
V L "cmd" 6 665 "uint8_t"
V L "arg" 6 665 "uint32_t"
V L "packet" 6 667 "uint8_t[6]" "the entire command, argument, and crc in one variable"
C L "mmcsd_send_cmd" 6 131 2 "FUNCTION"
C L "mmcsd_send_cmd" 6 131 1 "FUNCTION"
C L "mmcsd_send_cmd" 6 131 1 "FUNCTION"
C L "mmcsd_send_cmd" 6 131 6 "FUNCTION"
F G "mmcsd_get_r1" 6 701 "MMCSD_err(uint32_t arg)"
V L "response" 6 704 "uint8_t"
C L "mmcsd_get_r1" 6 131 1 "FUNCTION"
V L "timeout" 6 705 "uint8_t"
C L "mmcsd_get_r1" 6 131 2 "FUNCTION"
C L "mmcsd_get_r1" 6 131 2 "FUNCTION"
C L "mmcsd_get_r1" 6 131 2 "FUNCTION"
C L "mmcsd_get_r1" 6 131 1 "FUNCTION"
C L "mmcsd_get_r1" 6 131 1 "FUNCTION"
C L "mmcsd_get_r1" 6 131 2 "FUNCTION"
F G "mmcsd_get_r2" 6 731 "MMCSD_err()"
V L "r2" 6 731 "uint8_t[1]"
F G "mmcsd_get_r3" 6 740 "MMCSD_err(*uint8_t r2)"
V L "r3" 6 740 "uint8_t[1]"
F G "mmcsd_get_r7" 6 745 "MMCSD_err(*uint8_t r3)"
V L "r7" 6 745 "uint8_t[1]"
V L "i" 6 747 "uint8_t" "counter for loop"
C L "mmcsd_get_r7" 6 131 1 "FUNCTION"
C L "mmcsd_get_r7" 6 131 1 "FUNCTION"
F G "mmcsd_wait_for_token" 6 759 "MMCSD_err()"
V L "token" 6 759 "uint8_t"
V L "r1" 6 761 "MMCSD_err" "get a token"
C L "mmcsd_wait_for_token" 6 131 1 "FUNCTION"
C L "mmcsd_wait_for_token" 6 131 1 "FUNCTION"
F G "mmcsd_crc7" 6 774 "int8()"
V L "data" 6 774 "*int8"
V L "length" 6 774 "uint8_t"
V L "i" 6 776 "uint8_t"
V L "ibit" 6 776 "uint8_t"
V L "c" 6 776 "uint8_t"
V L "crc" 6 776 "uint8_t"
C L "mmcsd_crc7" 6 131 1 "FUNCTION"
C L "mmcsd_crc7" 6 131 1 "FUNCTION"
C L "mmcsd_crc7" 6 131 2 "FUNCTION"
F G "mmcsd_crc16" 6 799 "uint16_t()"
V L "data" 6 799 "*int8"
V L "length" 6 799 "uint8_t"
V L "i" 6 801 "uint8_t"
V L "ibit" 6 801 "uint8_t"
V L "c" 6 801 "uint8_t"
V L "crc" 6 803 "uint16_t"
C L "mmcsd_crc16" 6 131 1 "FUNCTION"
C L "mmcsd_crc16" 6 131 1 "FUNCTION"
C L "mmcsd_crc16" 6 131 2 "FUNCTION"
F G "mmcsd_select" 6 826 "void()"
F G "mmcsd_deselect" 6 831 "void()"
F G "mmcsd_load_buffer" 6 837 "MMCSD_err()"
F G "mmcsd_flush_buffer" 6 843 "MMCSD_err()"
C L "mmcsd_flush_buffer" 6 131 1 "FUNCTION"
F G "mmcsd_move_buffer" 6 853 "MMCSD_err()"
V L "new_addr" 6 853 "uint32_t"
V L "ec" 6 855 "MMCSD_err"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
V L "new_block" 6 858 "uint32_t" "make sure we're still on the same block"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
C L "mmcsd_move_buffer" 6 131 1 "FUNCTION"
F G "mmcsd_read_byte" 6 887 "MMCSD_err()"
V L "addr" 6 887 "uint32_t"
V L "data" 6 887 "*int8"
V L "ec" 6 889 "MMCSD_err"
F G "mmcsd_write_byte" 6 902 "MMCSD_err(*int8 data)"
V L "addr" 6 902 "uint32_t"
V L "data" 6 902 "int8"
V L "ec" 6 904 "MMCSD_err"
D G "FAT_PIC_C" 8 208 ""
D G "FAT16" 8 221 ""
D G "MAX_FILE_NAME_LENGTH" 8 228 "0x20" "the maximum length of a file name for our FAT, including /0 terminator"
D G "STREAM_BUF_SIZE" 8 229 "0x20" "how big the FILE buffer is. 0x20 is optimal"
D G "EOF" 8 233 "-1"
D G "GOODEC" 8 234 "0"
D G "fatpos_t" 8 235 "int32"
D G "SEEK_CUR" 8 236 "0"
D G "SEEK_END" 8 237 "1"
D G "SEEK_SET" 8 238 "2"
V G "Bytes_Per_Cluster" 8 247 "int16" "number of addressable bytes per cluster"
V G "FAT_Start" 8 248 "int16" "when the first FAT begins"
V G "Data_Start" 8 251 "int32" "when data starts"
V G "FAT_Length" 8 252 "int32" "the length of one FAT"
V G "Next_Free_Clust" 8 253 "int32" "where the next free cluster is"
V G "Root_Dir" 8 254 "int32" "when the root directory starts"
E G "Data_File" 8 259 "0" "the stream is pointing to a directory"
E G "Directory" 8 260 "1" "the stream isn't currently pointing to anything"
E G "None" 8 261 "2"
E G "Closed" 8 266 "0"
E G "Read" 8 267 "1"
E G "Write" 8 268 "2"
E G "Append" 8 269 "4"
E G "Binary" 8 270 "8"
E G "EOF_Reached" 8 271 "16"
E G "Read_Error" 8 272 "32"
E G "Write_Error" 8 273 "64"
E G "File_Not_Found" 8 274 "128"
T G "FILE" 8 293 "{int32 Bytes_Until_EOF,int32 Cur_Char,int32 Entry_Addr,int32 Parent_Start_Addr,int32 Size,int32 Start_Addr,filetype File_Type,ioflags Flags,int8[32] Buf}" "/                     ///"
C L "fatopen" 8 215 3 "FUNCTION"
F G "fatopen" 8 302 "sint8()"
V L "fname" 8 302 "int8[1]"
V L "mode" 8 302 "int8[1]"
V L "stream" 8 302 "*FILE"
F G "fatreopen" 8 303 "sint8()"
V L "fname" 8 303 "int8[1]"
V L "mode" 8 303 "int8[1]"
V L "stream" 8 303 "*FILE"
F G "fatclose" 8 304 "sint8()"
V L "stream" 8 304 "*FILE"
F G "fatgetc" 8 305 "sint8()"
V L "stream" 8 305 "*FILE"
F G "fatputc" 8 306 "sint8()"
V L "ch" 8 306 "int8"
V L "stream" 8 306 "*FILE"
F G "fatgets" 8 307 "*int8()"
V L "str" 8 307 "*int8"
V L "num" 8 307 "int8"
V L "stream" 8 307 "*FILE"
F G "fatputs" 8 308 "sint8()"
V L "str" 8 308 "*int8"
V L "stream" 8 308 "*FILE"
F G "fatprintf" 8 309 "sint8()"
V L "stream" 8 309 "*FILE"
F G "fatgetpos" 8 310 "sint8()"
V L "stream" 8 310 "*FILE"
V L "position" 8 310 "*int32"
F G "fatsetpos" 8 311 "sint8()"
V L "stream" 8 311 "*FILE"
V L "position" 8 311 "*int32"
F G "fatseek" 8 312 "sint8()"
V L "stream" 8 312 "*FILE"
V L "offset" 8 312 "int32"
V L "origin" 8 312 "int8"
F G "fateof" 8 313 "sint8()"
V L "stream" 8 313 "*FILE"
F G "faterror" 8 314 "sint8()"
V L "stream" 8 314 "*FILE"
F G "fatread" 8 315 "sint8()"
V L "buffer" 8 315 "*int8"
V L "size" 8 315 "int8"
V L "num" 8 315 "int32"
V L "stream" 8 315 "*FILE"
F G "fatwrite" 8 316 "sint8()"
V L "buffer" 8 316 "*int8"
V L "size" 8 316 "int8"
V L "count" 8 316 "int32"
V L "stream" 8 316 "*FILE"
F G "fatflush" 8 317 "sint8()"
V L "stream" 8 317 "*FILE"
F G "remove" 8 318 "sint8()"
V L "fname" 8 318 "*int8"
F G "clearerr" 8 319 "void()"
V L "stream" 8 319 "*FILE"
F G "rewind" 8 320 "void()"
V L "stream" 8 320 "*FILE"
F G "fattell" 8 321 "int32()"
V L "stream" 8 321 "*FILE" "/ Non-Standard C Functions ///"
F G "rm_file" 8 324 "sint8()"
V L "fname" 8 324 "int8[1]"
F G "rm_dir" 8 325 "sint8()"
V L "dname" 8 325 "int8[1]"
F G "mk_file" 8 326 "sint8()"
V L "fname" 8 326 "int8[1]"
F G "mk_dir" 8 327 "sint8()"
V L "dname" 8 327 "int8[1]" "/ Functions' Utility Functions ///"
F G "set_file" 8 330 "sint8()"
V L "fname" 8 330 "int8[1]"
V L "attrib" 8 330 "int8"
V L "stream" 8 330 "*FILE"
F G "get_file_name" 8 331 "sint8()"
V L "file_entry_addr" 8 331 "int32"
V L "name" 8 331 "int8[1]"
F G "set_file_name" 8 332 "sint8()"
V L "parent_dir_addr" 8 332 "int32"
V L "entry_addr" 8 332 "*int32"
V L "name" 8 332 "int8[1]"
F G "get_short_file_name" 8 333 "sint8()"
V L "file_entry_addr" 8 333 "int32"
V L "sname" 8 333 "int8[1]"
V L "type" 8 333 "int8"
F G "make_short_file_name" 8 334 "sint8()"
V L "parent_dir_addr" 8 334 "int32"
V L "fname" 8 334 "int8[1]"
V L "sname" 8 334 "int8[1]"
F G "long_name_chksum" 8 335 "int8()"
V L "pFcbName" 8 335 "*int8"
F G "check_invalid_char" 8 336 "sint8()"
V L "fname" 8 336 "int8[1]" "FAT16"
F G "get_next_free_cluster" 8 344 "sint8()"
V L "my_cluster" 8 344 "*int16"
F G "dealloc_clusters" 8 345 "sint8()"
V L "start_cluster" 8 345 "int16"
F G "alloc_clusters" 8 346 "sint8()"
V L "start_cluster" 8 346 "int16"
V L "new_cluster_addr" 8 346 "*int32"
F G "clear_cluster" 8 347 "sint8()"
V L "cluster" 8 347 "int16"
F G "write_fat" 8 348 "sint8()"
V L "cluster" 8 348 "int16"
V L "data" 8 348 "int16" "#ifdef FAT32"
F G "get_next_file" 8 350 "sint8()"
V L "stream" 8 350 "*FILE"
F G "get_prev_file" 8 351 "sint8()"
V L "stream" 8 351 "*FILE"
F G "get_next_free_addr" 8 352 "sint8()"
V L "my_addr" 8 352 "*int32"
F G "get_next_free_entry" 8 353 "sint8()"
V L "start_addr" 8 353 "*int32"
F G "get_next_entry" 8 354 "sint8()"
V L "start_addr" 8 354 "*int32"
F G "get_prev_entry" 8 355 "sint8()"
V L "start_addr" 8 355 "*int32"
F G "read_buffer" 8 356 "sint8()"
V L "stream" 8 356 "*FILE"
V L "val" 8 356 "*int8"
F G "write_buffer" 8 357 "sint8()"
V L "stream" 8 357 "*FILE"
V L "val" 8 357 "int8"
F G "fill_entry" 8 358 "void()"
V L "the_entry" 8 358 "int8[1]"
V L "val" 8 358 "int8"
V L "start_ind" 8 358 "int8"
F G "disp_timestamp" 8 359 "void()"
V L "timestamp" 8 359 "int16"
F G "disp_datestamp" 8 360 "void()"
V L "datestamp" 8 360 "int16" "/ Data Utility Functions ///"
F G "fat_init" 8 363 "sint8()" "FAT16"
F G "get_next_cluster" 8 370 "sint8()"
V L "my_cluster" 8 370 "*int16"
F G "get_prev_cluster" 8 371 "sint8()"
V L "my_cluster" 8 371 "*int16"
F G "cluster_to_addr" 8 372 "int32()"
V L "cluster" 8 372 "int16"
F G "addr_to_cluster" 8 373 "int16()"
V L "addr" 8 373 "int32" "#ifdef FAT32"
F G "get_next_addr" 8 375 "sint8()"
V L "my_addr" 8 375 "*int32"
F G "get_prev_addr" 8 376 "sint8()"
V L "my_addr" 8 376 "*int32"
F G "format" 8 377 "sint8()"
V L "DskSize" 8 377 "int32" "/ Debugging Utility Functions ///"
F G "disp_folder_contents" 8 380 "sint8()"
V L "foldername" 8 380 "int8[1]"
F G "dump_addr" 8 381 "sint8()"
V L "from" 8 381 "int32"
V L "to" 8 381 "int32"
F G "dump_clusters" 8 382 "sint8()"
V L "from" 8 382 "int32"
V L "to" 8 382 "int32"
F G "disp_fat_stats" 8 383 "void()"
F G "fatprintfinfo" 8 384 "sint8()"
V L "stream" 8 384 "*FILE" "/                          ///"
C L "fatprintfinfo" 8 215 18 "FUNCTION"
F G "fatopen" 8 411 "sint8()"
V L "fname" 8 411 "int8[1]"
V L "mode" 8 411 "int8[1]"
V L "stream" 8 411 "*FILE"
V L "fname_parse_pos" 8 413 "int8"
C L "fatopen" 8 215 1 "FUNCTION"
V L "target_file" 8 415 "int8[32]" "temporary buffer to hold names of files"
V L "cur_stream" 8 417 "FILE" "this will   be the stream that will be returned if all goes well"
V L "depth" 8 421 "int8"
C L "fatopen" 8 215 1 "FUNCTION"
V L "target_file_parse_pos" 8 422 "int8" "the current index of the target_file character"
C L "fatopen" 8 215 3 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatopen" 8 215 1 "FUNCTION"
C L "fatreopen" 8 215 15 "FUNCTION"
F G "fatreopen" 8 578 "sint8()"
V L "fname" 8 578 "int8[1]"
V L "mode" 8 578 "int8[1]"
V L "stream" 8 578 "*FILE" "close the old stream"
C L "fatreopen" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 4 "FUNCTION"
F G "fatclose" 8 597 "sint8(*int8 fname,*int8 mode,*FILE stream)"
V L "stream" 8 597 "*FILE"
V L "ec" 8 599 "int8"
V L "first_cluster" 8 601 "int32" "commit data back to the stream's entry, if needed"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatclose" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 5 "FUNCTION"
F G "fatgetc" 8 659 "sint8(*FILE stream)"
V L "stream" 8 659 "*FILE"
V L "ch" 8 661 "int8" "character read in"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatgetc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 6 "FUNCTION"
F G "fatputc" 8 706 "sint8()"
V L "ch" 8 706 "int8"
V L "stream" 8 706 "*FILE" "check to see if the stream has proper permissions to write"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatputc" 8 215 1 "FUNCTION"
C L "fatgets" 8 215 8 "FUNCTION"
F G "fatgets" 8 767 "*int8(int8 ch,*FILE stream)"
V L "str" 8 767 "*int8"
V L "num" 8 767 "int8"
V L "stream" 8 767 "*FILE"
V L "i" 8 769 "int8" "counter for loops"
C L "fatgets" 8 215 1 "FUNCTION"
C L "fatgets" 8 215 1 "FUNCTION"
C L "fatputs" 8 215 5 "FUNCTION"
F G "fatputs" 8 794 "sint8(int8 num,*FILE stream)"
V L "str" 8 794 "*int8"
V L "stream" 8 794 "*FILE"
V L "i" 8 796 "int8"
C L "fatputs" 8 215 2 "FUNCTION"
C L "fatprintf" 8 215 4 "FUNCTION"
F G "fatprintf" 8 815 "sint8(*FILE stream)"
V L "stream" 8 815 "*FILE"
V L "ch" 8 817 "sint8" "character read in"
C L "fatprintf" 8 215 1 "FUNCTION"
C L "fatgetpos" 8 215 5 "FUNCTION"
F G "fatgetpos" 8 836 "sint8()"
V L "stream" 8 836 "*FILE"
V L "position" 8 836 "*int32"
C L "fatsetpos" 8 215 5 "FUNCTION"
F G "fatsetpos" 8 849 "sint8(*FILE stream,*int32 position)"
V L "stream" 8 849 "*FILE"
V L "position" 8 849 "*int32" "FAT16"
V L "cur_cluster" 8 855 "int16" "the current cluster we're pointing to"
C L "fatsetpos" 8 215 1 "FUNCTION"
V L "i" 8 857 "int32" "pointer to memory"
C L "fatsetpos" 8 215 2 "FUNCTION"
C L "fatsetpos" 8 215 2 "FUNCTION"
C L "fatsetpos" 8 215 2 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatsetpos" 8 215 1 "FUNCTION"
C L "fatseek" 8 215 9 "FUNCTION"
F G "fatseek" 8 929 "sint8()"
V L "stream" 8 929 "*FILE"
V L "offset" 8 929 "int32"
V L "origin" 8 929 "int8"
V L "myoffset" 8 931 "int32" "since fatsetpos requires a pointer to a variable, we need this here"
C L "fatseek" 8 215 1 "FUNCTION"
C L "fateof" 8 215 5 "FUNCTION"
F G "fateof" 8 967 "sint8(int32 offset,int8 origin)"
V L "stream" 8 967 "*FILE"
C L "fatread" 8 215 7 "FUNCTION"
F G "fatread" 8 981 "sint8(*FILE stream,int8 origin)"
V L "buffer" 8 981 "*int8"
V L "size" 8 981 "int8"
V L "num" 8 981 "int32"
V L "stream" 8 981 "*FILE"
V L "i" 8 983 "int32" "counter for loop"
C L "fatread" 8 215 1 "FUNCTION"
C L "fatwrite" 8 215 7 "FUNCTION"
F G "fatwrite" 8 1001 "sint8(int8 size,int32 num,*FILE stream)"
V L "buffer" 8 1001 "*int8"
V L "size" 8 1001 "int8"
V L "count" 8 1001 "int32"
V L "stream" 8 1001 "*FILE"
V L "i" 8 1003 "int32" "counter for loop"
C L "fatwrite" 8 215 1 "FUNCTION"
C L "fatflush" 8 215 4 "FUNCTION"
F G "fatflush" 8 1019 "sint8(int8 size,int32 count,*FILE stream)"
V L "stream" 8 1019 "*FILE" "check to see if we have a buffer"
C L "fatflush" 8 215 1 "FUNCTION"
C L "fatflush" 8 215 1 "FUNCTION"
C L "fatflush" 8 215 2 "FUNCTION"
C L "remove" 8 215 8 "FUNCTION"
F G "remove" 8 1059 "sint8(*FILE stream,int32 count,*FILE stream)"
V L "fname" 8 1059 "*int8"
C L "faterror" 8 215 5 "FUNCTION"
F G "faterror" 8 1074 "sint8(*int8 fname,int32 count,*FILE stream)"
V L "stream" 8 1074 "*FILE"
C L "clearerr" 8 215 4 "FUNCTION"
F G "clearerr" 8 1085 "void(*FILE stream,int32 count,*FILE stream)"
V L "stream" 8 1085 "*FILE"
C L "rewind" 8 215 4 "FUNCTION"
F G "rewind" 8 1096 "void(*FILE stream,int32 count,*FILE stream)"
V L "stream" 8 1096 "*FILE" "set the stream back to the beginning"
C L "fattell" 8 215 4 "FUNCTION"
F G "fattell" 8 1109 "int32(*FILE stream,int32 count,*FILE stream)"
V L "stream" 8 1109 "*FILE"
V L "retval" 8 1111 "int32"
C L "rm_file" 8 215 8 "FUNCTION"
F G "rm_file" 8 1130 "sint8(int32 count,*FILE stream)"
V L "fname" 8 1130 "int8[1]"
V L "order" 8 1133 "int8"
V L "ulinked_entry" 8 1134 "int8"
C L "rm_file" 8 215 1 "FUNCTION"
V L "i" 8 1136 "int32"
V L "mode" 8 1138 "int8[1]"
C L "rm_file" 8 215 1 "FUNCTION"
V L "stream" 8 1140 "FILE" "the stream that we'll be working with"
C L "rm_file" 8 215 1 "FUNCTION"
C L "rm_file" 8 215 1 "FUNCTION"
C L "rm_file" 8 215 1 "FUNCTION"
C L "rm_file" 8 215 1 "FUNCTION"
C L "rm_file" 8 215 1 "FUNCTION"
C L "rm_dir" 8 215 9 "FUNCTION"
F G "rm_dir" 8 1192 "sint8()"
V L "dname" 8 1192 "int8[1]"
V L "mode" 8 1194 "int8[1]"
C L "rm_dir" 8 215 1 "FUNCTION"
V L "stream" 8 1196 "FILE" "the stream that we'll be working with"
C L "rm_dir" 8 215 1 "FUNCTION"
C L "rm_dir" 8 215 1 "FUNCTION"
C L "rm_dir" 8 215 1 "FUNCTION"
C L "rm_dir" 8 215 2 "FUNCTION"
C L "mk_file" 8 215 8 "FUNCTION"
F G "mk_file" 8 1227 "sint8()"
V L "fname" 8 1227 "int8[1]"
V L "filename" 8 1230 "int8[32]" "the file name we're trying to make"
V L "mode" 8 1231 "int8[1]"
C L "mk_file" 8 215 1 "FUNCTION"
V L "buf" 8 1234 "int8" "buffer to hold values"
V L "entire_entry" 8 1235 "int8[32]" "entire first entry"
V L "filename_pos" 8 1236 "int8"
C L "mk_file" 8 215 1 "FUNCTION"
V L "fname_pos" 8 1237 "int8" "the current parse position of the input the the function"
V L "i" 8 1239 "int32" "pointer to memory"
V L "stream" 8 1241 "FILE" "the stream that we'll be working with"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 2 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_file" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 7 "FUNCTION"
F G "mk_dir" 8 1292 "sint8()"
V L "dname" 8 1292 "int8[1]"
V L "dirname" 8 1295 "int8[32]" "the directory name we're trying to make"
V L "entire_entry" 8 1296 "int8[32]" "used to hold the link entries (. and ..) to the directory and its parent"
V L "mode" 8 1297 "int8[1]"
C L "mk_dir" 8 215 1 "FUNCTION"
V L "dirname_pos" 8 1300 "int8"
C L "mk_dir" 8 215 1 "FUNCTION"
V L "dname_pos" 8 1301 "int8" "the current parse position of the input the the function"
V L "j" 8 1302 "int8" "counter for loops"
V L "i" 8 1304 "int32" "pointer to memory"
V L "stream" 8 1306 "FILE" "the stream that we'll be working with"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 2 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 2 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "mk_dir" 8 215 1 "FUNCTION"
C L "set_file" 8 215 9 "FUNCTION"
F G "set_file" 8 1438 "sint8()"
V L "fname" 8 1438 "int8[1]"
V L "attrib" 8 1438 "int8"
V L "stream" 8 1438 "*FILE"
V L "cur_attrib" 8 1441 "int8" "the attribute of the most recently read entry"
V L "cur_state" 8 1442 "int8" "the state of the most recently read entry"
V L "ec" 8 1443 "int8"
C L "set_file" 8 215 1 "FUNCTION"
V L "i" 8 1445 "int32" "pointer to memory"
V L "name_buffer" 8 1447 "int8[32]" "buffer to hold in the most recently read in name"
C L "set_file" 8 215 2 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 2 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "set_file" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 5 "FUNCTION"
F G "get_file_name" 8 1563 "sint8()"
V L "file_entry_addr" 8 1563 "int32"
V L "name" 8 1563 "int8[1]"
V L "j" 8 1566 "int8" "counter for loops"
V L "k" 8 1567 "int8"
C L "get_file_name" 8 215 1 "FUNCTION"
V L "order" 8 1568 "int8" "byte to hold the current long file name order"
V L "type" 8 1569 "int8" "the type of entry that was just read in"
V L "i" 8 1571 "int32" "pointer for memory"
C L "get_file_name" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 1 "FUNCTION"
C L "get_file_name" 8 215 2 "FUNCTION"
C L "set_file_name" 8 215 6 "FUNCTION"
F G "set_file_name" 8 1624 "sint8()"
V L "parent_dir_addr" 8 1624 "int32"
V L "entry_addr" 8 1624 "*int32"
V L "name" 8 1624 "int8[1]"
V L "sname" 8 1626 "int8[12]" "place to hold the short file name"
V L "name_pos" 8 1628 "sint8"
C L "set_file_name" 8 215 1 "FUNCTION"
V L "chksum" 8 1631 "int8" "the long file name checksum"
V L "entire_entry" 8 1632 "int8[32]" "the entire entry to put write onto the media"
V L "entry_pos" 8 1633 "int8" "the current position inside of entire_entry"
V L "long_entry" 8 1634 "int8"
C L "set_file_name" 8 215 1 "FUNCTION"
V L "i" 8 1636 "int32" "pointer to memory"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 2 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "set_file_name" 8 215 1 "FUNCTION"
C L "get_short_file_name" 8 215 5 "FUNCTION"
F G "get_short_file_name" 8 1736 "sint8()"
V L "file_entry_addr" 8 1736 "int32"
V L "sname" 8 1736 "int8[1]"
V L "type" 8 1736 "int8"
V L "buf" 8 1739 "int8"
V L "i" 8 1740 "int8"
V L "j" 8 1741 "int8"
C L "get_short_file_name" 8 215 1 "FUNCTION"
C L "get_short_file_name" 8 215 1 "FUNCTION"
C L "get_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 6 "FUNCTION"
F G "make_short_file_name" 8 1768 "sint8()"
V L "parent_dir_addr" 8 1768 "int32"
V L "fname" 8 1768 "int8[1]"
V L "sname" 8 1768 "int8[1]"
V L "val" 8 1771 "int8[12]"
V L "cur_fname" 8 1772 "int8[12]"
V L "cur_fnum" 8 1773 "int8[7]"
V L "buf" 8 1776 "int8"
V L "ext_pos" 8 1777 "int8"
V L "fname_parse_pos" 8 1778 "int8"
V L "val_parse_pos" 8 1779 "int8"
V L "fnum" 8 1782 "int32"
V L "i" 8 1783 "int32" "figure out where the extension position is"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 2 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "make_short_file_name" 8 215 1 "FUNCTION"
C L "long_name_chksum" 8 215 6 "FUNCTION"
F G "long_name_chksum" 8 1915 "int8()"
V L "pFcbName" 8 1915 "*int8"
V L "FcbNameLen" 8 1918 "int8"
V L "Sum" 8 1919 "int8"
C L "long_name_chksum" 8 215 1 "FUNCTION"
C L "check_invalid_char" 8 215 4 "FUNCTION"
F G "check_invalid_char" 8 1934 "sint8()"
V L "fname" 8 1934 "int8[1]"
V L "fname_pos" 8 1936 "int8"
C L "get_next_free_cluster" 8 215 6 "FUNCTION"
F G "get_next_free_cluster" 8 1956 "sint8()"
V L "my_cluster" 8 1956 "*int16" "NO FAST_FAT"
C L "get_next_free_cluster" 8 215 1 "FUNCTION"
V L "val" 8 1995 "int8[2]"
V L "cur_cluster" 8 1997 "int16"
V L "FAT_addr" 8 2000 "int32" "the current address that the algorithm is on"
V L "j" 8 2001 "int32" "first, convert *my_cluster to an addressable location in the FAT"
C L "get_next_free_cluster" 8 215 1 "FUNCTION"
C L "get_next_free_cluster" 8 215 1 "FUNCTION"
C L "get_next_free_cluster" 8 215 1 "FUNCTION"
C L "get_next_free_cluster" 8 215 2 "FUNCTION"
C L "get_next_free_cluster" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 5 "FUNCTION"
F G "get_next_file" 8 2038 "sint8()"
V L "stream" 8 2038 "*FILE"
V L "cluster" 8 2041 "int32"
V L "cur_addr" 8 2042 "int32"
V L "size" 8 2043 "int32"
V L "fileentry" 8 2046 "int8"
V L "filetype" 8 2047 "int8"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_next_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 5 "FUNCTION"
F G "get_prev_file" 8 2103 "sint8()"
V L "stream" 8 2103 "*FILE"
V L "cluster" 8 2106 "int32"
V L "cur_addr" 8 2107 "int32"
V L "size" 8 2108 "int32"
V L "fileentry" 8 2111 "int8"
V L "filetype" 8 2112 "int8"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_prev_file" 8 215 1 "FUNCTION"
C L "get_next_free_addr" 8 215 5 "FUNCTION"
F G "get_next_free_addr" 8 2168 "sint8()"
V L "my_addr" 8 2168 "*int32"
V L "val" 8 2170 "int8" "buffer to hold values"
V L "cur_addr" 8 2172 "int32" "pointer to memory"
C L "get_next_free_addr" 8 215 1 "FUNCTION"
C L "get_next_free_addr" 8 215 1 "FUNCTION"
C L "get_next_entry" 8 215 5 "FUNCTION"
F G "get_next_entry" 8 2199 "sint8()"
V L "start_addr" 8 2199 "*int32"
V L "i" 8 2201 "int32"
C L "get_prev_entry" 8 215 5 "FUNCTION"
F G "get_prev_entry" 8 2222 "sint8()"
V L "start_addr" 8 2222 "*int32"
V L "i" 8 2224 "int32"
C L "get_next_free_entry" 8 215 5 "FUNCTION"
F G "get_next_free_entry" 8 2245 "sint8()"
V L "start_addr" 8 2245 "*int32"
V L "buf" 8 2247 "int8"
V L "i" 8 2249 "int32"
C L "get_next_free_entry" 8 215 1 "FUNCTION"
C L "alloc_clusters" 8 215 5 "FUNCTION"
F G "alloc_clusters" 8 2283 "sint8()"
V L "start_cluster" 8 2283 "int16"
V L "new_cluster_addr" 8 2283 "*int32" "FAT16"
V L "cur_cluster" 8 2292 "int16"
V L "next_cluster" 8 2293 "int16" "#ifdef FAT32"
C L "alloc_clusters" 8 215 2 "FUNCTION"
C L "alloc_clusters" 8 215 1 "FUNCTION"
C L "alloc_clusters" 8 215 1 "FUNCTION"
C L "alloc_clusters" 8 215 2 "FUNCTION"
C L "alloc_clusters" 8 215 1 "FUNCTION"
C L "dealloc_clusters" 8 215 4 "FUNCTION"
F G "dealloc_clusters" 8 2335 "sint8()"
V L "start_cluster" 8 2335 "int16" "FAT16"
V L "cur_cluster" 8 2344 "int16" "the current cluster we're pointing to"
V L "next_cluster" 8 2345 "int16" "the next cluster we're going to point to"
C L "dealloc_clusters" 8 215 2 "FUNCTION"
C L "dealloc_clusters" 8 215 1 "FUNCTION"
C L "dealloc_clusters" 8 215 1 "FUNCTION"
C L "dealloc_clusters" 8 215 1 "FUNCTION"
C L "dealloc_clusters" 8 215 1 "FUNCTION"
C L "clear_cluster" 8 215 4 "FUNCTION"
F G "clear_cluster" 8 2380 "sint8()"
V L "cluster" 8 2380 "int16"
V L "clear_entry" 8 2384 "int8[32]"
V L "j" 8 2385 "int8"
V L "i" 8 2387 "int16"
V L "start_addr" 8 2389 "int32"
C L "write_fat" 8 215 6 "FUNCTION"
F G "write_fat" 8 2419 "sint8()"
V L "cluster" 8 2419 "int16"
V L "data" 8 2419 "int16"
C L "read_buffer" 8 215 6 "FUNCTION"
F G "read_buffer" 8 2435 "sint8(int16 cluster,int16 data)"
V L "stream" 8 2435 "*FILE"
V L "val" 8 2435 "*int8"
V L "i" 8 2437 "int8" "counter for loops"
C L "read_buffer" 8 215 1 "FUNCTION"
C L "read_buffer" 8 215 1 "FUNCTION"
C L "read_buffer" 8 215 1 "FUNCTION"
C L "write_buffer" 8 215 5 "FUNCTION"
F G "write_buffer" 8 2466 "sint8(*int8 val)"
V L "stream" 8 2466 "*FILE"
V L "val" 8 2466 "int8" "check to see if we should dump the buffer to the card"
C L "write_buffer" 8 215 1 "FUNCTION"
C L "write_buffer" 8 215 1 "FUNCTION"
C L "fill_entry" 8 215 6 "FUNCTION"
F G "fill_entry" 8 2494 "void(*FILE stream,int8 val)"
V L "the_entry" 8 2494 "int8[1]"
V L "val" 8 2494 "int8"
V L "start_ind" 8 2494 "int8"
V L "i" 8 2496 "int8"
C L "disp_timestamp" 8 215 4 "FUNCTION"
F G "disp_timestamp" 8 2526 "void(int8 val,int8 start_ind)"
V L "timestamp" 8 2526 "int16" "Hours:Minutes:Seconds"
C L "disp_datestamp" 8 215 4 "FUNCTION"
F G "disp_datestamp" 8 2541 "void()"
V L "datestamp" 8 2541 "int16" "Month/Day/Year"
C L "fat_init" 8 215 5 "FUNCTION"
F G "fat_init" 8 2558 "sint8()"
V L "ec" 8 2560 "int8"
V L "FATs" 8 2563 "int8"
V L "Sectors_Per_Cluster" 8 2564 "int8"
V L "Bytes_Per_Sector" 8 2567 "int16"
V L "Reserved_Sectors" 8 2568 "int16"
V L "Small_Sectors" 8 2569 "int16"
V L "Hidden_Sectors" 8 2572 "int32"
V L "Large_Sectors" 8 2573 "int32" "FAT16"
V L "Root_Entries" 8 2579 "int16"
V L "Sectors_Per_FAT" 8 2580 "int16" "#ifdef FAT32"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "fat_init" 8 215 2 "FUNCTION"
C L "fat_init" 8 215 1 "FUNCTION"
C L "get_next_cluster" 8 215 5 "FUNCTION"
F G "get_next_cluster" 8 2645 "sint8()"
V L "my_cluster" 8 2645 "*int16" "convert the current cluster into the address of where information about"
C L "get_next_cluster" 8 215 2 "FUNCTION"
C L "get_next_cluster" 8 215 1 "FUNCTION"
C L "get_prev_cluster" 8 215 5 "FUNCTION"
F G "get_prev_cluster" 8 2670 "sint8(*int16 my_cluster)"
V L "my_cluster" 8 2670 "*int16" "#ifdef FAT32"
V L "cur_cluster" 8 2679 "int16"
V L "target_cluster" 8 2680 "int16"
C L "get_prev_cluster" 8 215 1 "FUNCTION"
C L "get_prev_cluster" 8 215 1 "FUNCTION"
C L "get_prev_cluster" 8 215 1 "FUNCTION"
C L "get_prev_cluster" 8 215 1 "FUNCTION"
C L "get_prev_cluster" 8 215 1 "FUNCTION"
C L "get_next_addr" 8 215 5 "FUNCTION"
F G "get_next_addr" 8 2711 "sint8()"
V L "my_addr" 8 2711 "*int32"
V L "temp" 8 2713 "int32"
V L "c" 8 2717 "int16" "check to make sure that the next iteration will give us a contiguous address"
C L "get_next_addr" 8 215 2 "FUNCTION"
C L "get_prev_addr" 8 215 5 "FUNCTION"
F G "get_prev_addr" 8 2749 "sint8()"
V L "my_addr" 8 2749 "*int32"
V L "temp" 8 2751 "int32"
V L "c" 8 2755 "int16"
C L "get_prev_addr" 8 215 2 "FUNCTION"
C L "get_prev_addr" 8 215 1 "FUNCTION"
C L "cluster_to_addr" 8 215 4 "FUNCTION"
F G "cluster_to_addr" 8 2788 "int32()"
V L "cluster" 8 2788 "int16"
C L "cluster_to_addr" 8 215 2 "FUNCTION"
C L "addr_to_cluster" 8 215 4 "FUNCTION"
F G "addr_to_cluster" 8 2812 "int16(int16 cluster)"
V L "addr" 8 2812 "int32"
C L "addr_to_cluster" 8 215 2 "FUNCTION"
C L "format" 8 215 11 "FUNCTION"
F G "format" 8 2834 "sint8(int32 addr)"
V L "DskSize" 8 2834 "int32"
V L "BPB_Media" 8 2837 "int8"
V L "BPB_NumFATs" 8 2838 "int8"
V L "BPB_NumHeads" 8 2839 "int8"
V L "BPB_SecPerClus" 8 2840 "int8"
V L "BPB_SecPerTrk" 8 2841 "int8"
V L "BPB_BytsPerSec" 8 2844 "int16"
V L "i" 8 2845 "int16"
V L "BPB_TotSec" 8 2848 "int32"
V L "BS_VolID" 8 2849 "int32"
V L "RootDirSectors" 8 2850 "int32"
V L "TmpVal1" 8 2851 "int32"
V L "TmpVal2" 8 2852 "int32"
V L "BS_OEMName" 8 2855 "int8[1]"
V L "BS_VolLab" 8 2856 "int8[1]"
V L "BS_BootSig" 8 2876 "int8"
V L "BS_jmpBoot" 8 2877 "int8"
V L "data" 8 2878 "int8[62]"
V L "BPB_FATSz" 8 2881 "int16"
V L "BPB_RootEntCnt" 8 2882 "int16"
V L "BPB_RsvdSecCnt" 8 2883 "int16"
V L "BS_FilSysType" 8 2885 "int8[1]"
C L "format" 8 215 3 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 2 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 2 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "format" 8 215 1 "FUNCTION"
C L "disp_folder_contents" 8 215 5 "FUNCTION"
F G "disp_folder_contents" 8 3082 "sint8()"
V L "foldername" 8 3082 "int8[1]"
V L "filename" 8 3084 "int8[32]" "a place to hold a file name"
V L "stream" 8 3086 "FILE" "the stream that we're going to be working with"
V L "mode" 8 3088 "int8[1]"
C L "disp_folder_contents" 8 215 1 "FUNCTION"
C L "disp_folder_contents" 8 215 1 "FUNCTION"
C L "disp_folder_contents" 8 215 1 "FUNCTION"
C L "disp_folder_contents" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 5 "FUNCTION"
F G "dump_addr" 8 3123 "sint8()"
V L "from" 8 3123 "int32"
V L "to" 8 3123 "int32"
V L "j" 8 3126 "int8" "counter for loops"
V L "val" 8 3127 "int8[16]" "buffer to hold values"
V L "i" 8 3129 "int32" "pointer to memory"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 3 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_addr" 8 215 1 "FUNCTION"
C L "dump_clusters" 8 215 5 "FUNCTION"
F G "dump_clusters" 8 3175 "sint8()"
V L "from" 8 3175 "int32"
V L "to" 8 3175 "int32" "convert the clusters to addresses and dump"
C L "disp_fat_stats" 8 215 3 "FUNCTION"
F G "disp_fat_stats" 8 3187 "void(int32 from,int32 to)"
C L "fatprintfinfo" 8 215 4 "FUNCTION"
F G "fatprintfinfo" 8 3202 "sint8()"
V L "stream" 8 3202 "*FILE"
V L "ec" 8 3204 "int8"
V L "val" 8 3206 "int32"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
V L "name" 8 3208 "int8[32]" "get name"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
C L "fatprintfinfo" 8 215 1 "FUNCTION"
D G "COMMAND_SIZE" 0 47 "10"
D G "NUM_COMMANDS" 0 48 "11"
V G "g_CWD" 0 56 "int8[200]"
V G "commands" 0 58 "int8[11][10]"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 1 "FUNCTION"
C L "FindCommand" 0 42 7 "FUNCTION"
F G "FindCommand" 0 85 "int8()"
V L "cmd" 0 85 "*int8"
V L "buf" 0 87 "int8[10]"
V L "i" 0 88 "int8"
C L "DisplayPrompt" 0 42 3 "FUNCTION"
F G "DisplayPrompt" 0 105 "void()"
C L "DeleteFile" 0 42 3 "FUNCTION"
F G "DeleteFile" 0 115 "void()"
V L "fileName" 0 115 "*int8"
C L "MakeFile" 0 42 4 "FUNCTION"
F G "MakeFile" 0 132 "void()"
V L "fileName" 0 132 "*int8"
C L "AppendFile" 0 42 6 "FUNCTION"
F G "AppendFile" 0 151 "void()"
V L "fileName" 0 151 "*int8"
V L "appendString" 0 151 "*int8"
V L "stream" 0 153 "FILE"
C L "ChangeDirectory" 0 42 9 "FUNCTION"
F G "ChangeDirectory" 0 184 "void()"
V L "newCWD" 0 184 "*int8"
V L "stream" 0 186 "FILE" "append a / to the end of the filename if it doesn't exist"
C L "ChangeDirectory" 0 42 1 "FUNCTION"
C L "DisplayDirectory" 0 42 4 "FUNCTION"
F G "DisplayDirectory" 0 216 "void()"
V L "dir" 0 216 "*int8"
C L "MakeDirectory" 0 42 4 "FUNCTION"
F G "MakeDirectory" 0 227 "void()"
V L "dir" 0 227 "*int8" "append a / to the end of the filename if it doesn't exist"
C L "MakeDirectory" 0 42 1 "FUNCTION"
C L "RemoveDirectory" 0 42 5 "FUNCTION"
F G "RemoveDirectory" 0 251 "void()"
V L "dir" 0 251 "*int8"
C L "RemoveDirectory" 0 42 2 "FUNCTION"
D G "CAT_FROM_START" 0 268 "FALSE"
D G "CAT_FROM_END" 0 269 "TRUE"
C L "PrintFile" 0 42 7 "FUNCTION"
F G "PrintFile" 0 279 "void()"
V L "fileName" 0 279 "*int8"
V L "startFromEnd" 0 279 "int8"
V L "stream" 0 281 "FILE"
C L "FormatMedia" 0 42 4 "FUNCTION"
F G "FormatMedia" 0 304 "void()"
V L "mediaSize" 0 304 "*int8"
V L "size" 0 306 "int32"
C L "ShowHelp" 0 42 4 "FUNCTION"
F G "ShowHelp" 0 326 "void()"
F G "GetCMD" 0 343 "*int8()"
V L "in" 0 343 "*int8"
V L "tokens" 0 345 "int8[1]"
F G "GetOption" 0 349 "*int8()"
V L "in" 0 349 "*int8"
V L "tokensSpace" 0 351 "int8[1]"
V L "tokensQuote" 0 352 "int8[1]"
C L "GetOption" 0 42 1 "FUNCTION"
C L "GetOption" 0 42 1 "FUNCTION"
F G "main" 0 365 "void()"
V L "buffer" 0 367 "int8[255]"
V L "opt_buffer" 0 368 "int8[255]"
V L "cmd" 0 369 "*int8"
V L "option1" 0 369 "*int8"
V L "option2" 0 369 "*int8"
V L "i" 0 371 "int8" "pointer to the buffer"
C L "main" 0 42 2 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 3 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
C L "main" 0 42 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "read_external_memory" 3 0
F B "write_external_memory" 3 0
F B "setup_external_memory" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 0
F B "setup_adc_ports" 1 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 1 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 0
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "spi_xfer" 0 3
